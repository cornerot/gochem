/*
 * qm.go, part of gochem.
 * 
 * 
 * Copyright 2012 Raul Mera <rmera{at}chemDOThelsinkiDOTfi>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation; either version 2.1 of the 
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General 
 * Public License along with this program.  If not, see 
 * <http://www.gnu.org/licenses/>.
 * 
 * 
 * Gochem is developed at the laboratory for instruction in Swedish, Department of Chemistry,
 * University of Helsinki, Finland.  
 * 
 * 
 */
/***Dedicated to the long life of the Ven. Khenpo Phuntzok Tenzin Rinpoche***/

	
package chem

import "os"  
import "strings"
import "fmt"
import  "github.com/skelterjohn/go.matrix"
import "os/exec"


type MopacRunner struct{
	defmethod string
	command string
	inputname string
	}



func MakeMopacRunner() *MopacRunner{
	run:=new(MopacRunner)
	run.SetDefaults()
	return run 
	}

//MopacRunner methods

func (O *MopacRunner)SetnCPU(cpu int){
	//It does nothing! :-D
	}

func (O *MopacRunner)SetName(name string){
	O.inputname=name
	}

func (O *MopacRunner)SetCommand(name string){
	O.command=name
	}



func (O *MopacRunner)SetDefaults(){
	O.defmethod="PM6-DH2X"
	O.command=os.ExpandEnv("${MOPAC_LICENSE}/MOPAC2009.exe")
	}

//BuildInput builds an input for ORCA based int the data in atoms, coords and C.
//returns only error.
func (O *MopacRunner) BuildInput(atoms Ref, coords *matrix.DenseMatrix, Q *QMCalc) error{
	if strings.Contains(Q.Others,"RI"){
		Q.Others=""
		}
	//Only error so far
	if atoms==nil || coords == nil {
		return fmt.Errorf("Missing charges or coordinates")
		}
	ValidMethods:=[]string{"PM3","PM6","PM7","AM1"}
	if IsIn(Q.Method[0:3],ValidMethods)==-1{ //not found
		fmt.Fprintf(os.Stderr,"no method assigned for MOPAC calculation, will used the default %s, \n",O.defmethod)
		Q.Method=O.defmethod
		}
	opt:="" //Empty string means optimize
	if Q.Optimize==false{
		opt="1SCF"
		}
	//If this flag is set we'll look for a suitable MO file.
	//If not found, we'll just use the default ORCA guess
	hfuhf:="RHF"
	if atoms.Unpaired()!=0{
		hfuhf="UHF"
		}
	cosmo:=""
	if Q.Dielectric>0{
		cosmo=fmt.Sprintf("EPS=%2.1f RSOLV=1.3",Q.Dielectric)
		}
	multi:=mopacMultiplicity[atoms.Unpaired()+1]
	charge:=fmt.Sprintf("CHARGE=%d",atoms.Charge())
	MainOptions:=[]string{hfuhf,Q.Method,opt,cosmo,charge,multi,Q.Others,"BONDS AUX\n"}
	mainline:=strings.Join(MainOptions," ")
	//Now lets write the thing
	if O.inputname==""{
		O.inputname="input"
		}
	file,err:=os.Create(fmt.Sprintf("%s.mop",O.inputname))
	if err!=nil{
		return err
		}
	defer file.Close()
	if _,err=fmt.Fprint(file,"* ===============================\n* Input file for Mopac\n* ===============================\n");err!=nil{
		return err //After this check I just assume the file is ok and dont check again.
		}
	fmt.Fprint(file,mainline)
	fmt.Fprint(file,"\n")
	fmt.Fprint(file,"Mopac file generated by gochem :-)\n")
	//now the coordinates
	for i:=0;i<atoms.Len();i++{
		tag:=1
		if isInInt(Q.CConstraints,i)==true{
			tag=0
			}
	//	fmt.Println(atoms.Atom(i).Symbol)
		fmt.Fprintf(file,"%-2s  %8.5f %d %8.5f %d %8.5f %d\n",atoms.Atom(i).Symbol, coords.Get(i,0), tag, coords.Get(i,1), tag, coords.Get(i,2),tag)
		}
	fmt.Fprintf(file,"\n")
	return nil
	}

//Run runs the command given by the string O.command
//it waits or not for the result depending of 
func (O *MopacRunner) Run(wait bool) (err error){
	command:=exec.Command("nohup",O.command,fmt.Sprintf("%s.inp",O.inputname))
	if wait==true{
		err=command.Run()
		}else{
		err=command.Start()	
		}
	return err
	}



var mopacMultiplicity = map[int] string {
      1: "Singlet",
	  2: "Doublet",
      3: "Triplet",
	  4: "Quartet",
	  5: "Quintet",
	  6: "Sextet",
	  7: "Heptet",
	  8: "Octet",
	  9: "Nonet",
}


func (O *MopacRunner) GetEnergy() (float64, error){
	file,err:=os.Create(fmt.Sprintf("%s.out",O.inputname))
	if err!=nil{
		return err
		}
	defer file.Close()
	file=
	}
