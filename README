To the long life of the Ven. Khenpo Phuntzok Tenzin Rinpoche.


Gochem is a library for computational chemitry/biochemistry, in go. 
It provides structures for handling atoms and molecules, 
reading/writing some common formats (currently xyz, PDB, xtc and 
dcd) and a few functions for geometrical manipulation of 
molecules.

In gochem the Atom container contains all information about an atom that
is not expected to vary between states (mass, etc). Coordinates and 
b-factors (or temperature factors) are stored separately as Nx3 
gomatrix dense matrices the firsts and as slices of N float64 the seconds 
(N being the number of atoms).

A Molecule container, then, contains a slice of Atoms, a slice of
gomatrix dense matrices (one matrix for each state of the molecule) for
the coordinates, and a slice of slices of float64 for the b-factors.


Since coordinates can be obtained separated from the rest of the atomic
info, as in trajectories and the non-coordinate atomic information can 
be obtained separately from coordinates (from topology files, although
these are not currently supported), interfaces for trajectories (Traj)
and topologies or references (Ref) are provided, so general functions 
that works with PDB files or trajectories can be easily written. The 
type *Molecule implements both the Traj and Ref interfaces.


The library allows to read Gromacs trajectory files (xtc) if the flag
'xtc' is given during the build. This requires the xdrfile from the
Gromacs team (www.gromacs.org). 

Gochem also supports dcd trajectories if the flag 'dcd' is given
during the build. In this case the implementation is go-native, not
requiring external libraries.

Trajectories can be read  sequentially, where one frame is saved in 
memory at a time; or concurrently, where several frames are read at 
each time and returned as go channels to be processed in parallel.

The library includes a few tests that can also used as examples. 


Gochem uses the Gomatrix (https://github.com/skelterjohn/go.matrix) 
and Plotinum (http://code.google.com/p/plotinum/) libraries.


Design goals:

*Simplicity (of the code).
*Readability.
*Assume that users can code (dont overcomplicate the code with 
	zillion simplifying functions. When some of these are provided 
	they should be separated from the rest.) The helper functions 
	provided are to be clearly identified and isolated from the core
	of the library.
*Try to avoid the need for users to know gomatrix as much as possible
	-Supply convenience functions to deal with coordinates.
	-Of course users wanting to code calculations will need gomatrix 
	anyway.
*Fast and light
*Concurrent when possible and necessary
*Easy to extend
*Useful for computational biochemistry at a classical and QM levels.




Current capabilities.

1.  Reads/writes PDB and XYZ files.

2.   Reads XTC and DCD files, both sequentially and concurrently.

3.  Superimposes molecules (especially adequate for non-proteins since  
	doesn't use sequence information). The user specify what 
	atoms to use for the superimposing transformation calculation. 
	Then all the atoms will be superimposed accordingly. This means that
	non-identical molecules can be superimposed.

4.   Calculates RMSD between sets of coordinates.

5.   Allows to select atoms and coordinates by using a go slice 
     of indexes.

6.   Allows to replace selected coordinates for a new set.

7.   Calculates moment tensor and elipsoid of inertia--related properties 

8.   The Molecule object implements the sort.Interface interface, 
     so atoms can easily be sorted by b-factors.

9.   Axis manipulation:
	 + Align a vector with the Z axis
	 + Rotate around the Z axis until the xy projection of a vector becomes 
	  the Y axis
	 + Rotate a sub-group of atoms in a molecule using any 2 coordinates as
      the rotation axis.

	 **The latter is implemented using Clifford algebra and, as a 
	 legacy version, Euler angles and rotation matrices (math for the 
	 Cliffor algebra implementation by Doc. Dr. Janne Pesonen). 
	 The Clifford algebra implementation is concurrent. In general, 
	 Clifford algebra is mathematically better behaving than Euler 
	 angles, which are not defined for certain rotations.*

10.  Calculates and draws Ramachandran plots (uses the Plotinum library).
        for an aminoacidic chain or a subset of it.
11   Generates input for, run and recover results from QM calculations
	 with Turbomole, Orca and MOPAC (which must be obtained independently from their respective     
     distributors.)


TODOS:

*Protein superimposer (Calign?).
*Additional geometrical manipulation tools.
*Read Amber trajectories.
*Add more tests.

Currently, gochem is licensed under LGPL2. This might change towards BSD 
in the future. Meanwhile, if you want to use some of this for a 
BSD-licensed project, let me know.



LICENSE

Copyright 2012 Raul Mera <rmera{at}chemDOThelsinkiDOTfi> 


This program, including its documentation, 
is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation; either version 2.1 of the 
License, or (at your option) any later version.
	  
This program and its documentation is distributed in the hope that 
it will be useful, but WITHOUT ANY WARRANTY; without even the 
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
PURPOSE.  See the GNU General Public License for more details.
		    
You should have received a copy of the GNU Lesser General 
Public License along with this program.  If not, see 
<http://www.gnu.org/licenses/>. 


The mascot is a modification by Sebastian Franchini of the
Go language mascot by Renee French.


